{"version":3,"file":"perfs.js","sourceRoot":"","sources":["../src/perfs.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,UAAU,CAAA;AAE3B,IAAM,OAAO,GAAG,UAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY;IAClD,IAAG,CAAC,OAAO,CAAC,gBAAgB;QACxB,OAAO,KAAK,CAAA;IAChB,IAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;IAC9C,IAAG,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9B,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;QAC9B,IAAG,YAAY,CAAC,aAAa;YACzB,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QACpC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAE5B,IAAG,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,EAAE;YACzB,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAA;YAC3B,IAAG,YAAY,CAAC,oBAAoB,EAAE;gBAClC,YAAY,CAAC,oBAAoB,EAAE,CAAA;aACtC;SACJ;QACD,OAAO,IAAI,CAAA;KACd;IACD,OAAO,KAAK,CAAA;AAChB,CAAC,CAAA;AAED,IAAM,YAAY,GAAG,UAAC,YAAY,EAAE,SAAS;IACzC,IAAG,CAAC,KAAK,CAAC,QAAQ,IAAI,YAAY,IAAI,SAAS,EAAE;QAC7C,KAAK,CAAC,QAAQ,GAAG,IAAI,SAAS,CAAC,UAAA,OAAO;YAClC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAE,IAAI;gBACnC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAA;YAClD,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QACF,IAAG,YAAY,CAAC,oBAAoB;YAChC,YAAY,CAAC,oBAAoB,EAAE,CAAA;KAC1C;IACD,OAAO,KAAK,CAAC,QAAQ,CAAA;AACzB,CAAC,CAAA;AAED,IAAM,KAAK,GAAG;IACV,SAAS,EAAE,IAAI,GAAG,EAAE;IACpB,QAAQ,EAAE,IAAI;IACd,OAAO,EAAE,UAAC,IAAI,EAAE,QAAQ;QACpB,IAAG,CAAC,IAAI,IAAI,CAAC,QAAQ;YACjB,OAAM;QAEV,IAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAA;QACrE,IAAM,SAAS,GAAI,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAA;QAE3E,IAAG,CAAC,YAAY,CAAC,YAAY,EAAE,SAAS,CAAC;YACrC,OAAM;QAEV,IAAG,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,EAAE;YACrD,IAAG,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC;gBACvB,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,CAAC,CAAA;YACnE,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;SACtC;IAEL,CAAC;CACJ,CAAA;AAED,eAAe,KAAK,CAAA","sourcesContent":["import conf from \"./config\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n    if(!entries.getEntriesByName)\n        return false\n    const matches = entries.getEntriesByName(name)\n    if(matches && matches.length > 0) {\n        callback(matches.reverse()[0])\n        if(_performance.clearMeasures)\n            _performance.clearMeasures(name)\n        perfs.callbacks.delete(name)\n\n        if(perfs.callbacks.size < 1) {\n            perfs.observer.disconnect()\n            if(_performance.clearResourceTimings) {\n                _performance.clearResourceTimings()\n            }\n        }\n        return true\n    }\n    return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n    if(!perfs.observer && _performance && _observer) {\n        perfs.observer = new _observer(entries => {\n            perfs.callbacks.forEach((callback, name) => {\n                onMatch(entries, name, callback, _performance)\n            })\n        })\n        if(_performance.clearResourceTimings)\n            _performance.clearResourceTimings()\n    }\n    return perfs.observer\n}\n\nconst perfs = {\n    callbacks: new Map(),\n    observer: null,\n    observe: (name, callback) => {\n        if(!name || !callback)\n            return\n\n        const _performance = conf.polyfill(\"performance\", { doThrow: false })\n        const _observer  = conf.polyfill(\"PerformanceObserver\", { doThrow: false })\n\n        if(!lazyObserver(_performance, _observer))\n            return\n\n        if(!onMatch(_performance, name, callback, _performance)) {\n            if(perfs.callbacks.size < 1)\n                perfs.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n            perfs.callbacks.set(name, callback)\n        }\n\n    }\n}\n\nexport default perfs\n"]}