{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../src/middleware.ts"],"names":[],"mappings":"AAOA,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAAC,WAAmC,IAAK,OAAA,UAAC,aAAwB;IAC9F,OAAO,CACH,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;QACvB,aAAa,CAAC,CAAC;QAClB,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;YACtB,WAAW,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACnC,WAAW,CAAC,WAAW,CAAC,UAAC,GAAG,EAAE,IAAI,EAAE,GAAG;gBACnC,OAAA,CAAC,GAAG,KAAK,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAU,CAAC;YAA9E,CAA8E,CACjF,CACS,CAAA;AAClB,CAAC,EAVwE,CAUxE,CAAA","sourcesContent":["import { WretcherOptions } from \"./wretcher\"\nimport { WretcherResponse } from \"./resolver\"\n\nexport type Middleware = (options?: {[key: string]: any}) => ConfiguredMiddleware\nexport type ConfiguredMiddleware = (next: FetchLike) => FetchLike\nexport type FetchLike = (url: string, opts: WretcherOptions) => Promise<WretcherResponse>\n\nexport const middlewareHelper = (middlewares: ConfiguredMiddleware[]) => (fetchFunction: FetchLike): FetchLike => {\n    return (\n        middlewares.length === 0 ?\n           fetchFunction :\n        middlewares.length === 1 ?\n            middlewares[0](fetchFunction) :\n        middlewares.reduceRight((acc, curr, idx): any =>\n            (idx === middlewares.length - 2) ? curr(acc(fetchFunction)) : curr(acc as any)\n        )\n    ) as FetchLike\n}\n"]}